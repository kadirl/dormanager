import datetime

import bson
from aiogram import Router, types, F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums.parse_mode import ParseMode

from app.database.user import User, UserCollection
from app.database.event import Event, EventsCollection
from app.states import MainState, EventsStat
from app.keyboards import main_menu, notify_menu
from app.filters.events import DateFilter
from app.utils import clear_history, append_history, pop_history
from app import bot

router = Router()


@router.message(MainState.registered_user, F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≤–µ–Ω—Ç—ã üéÅ')
async def show_events(message: types.Message, state: FSMContext):
    await message.answer('–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —É –Ω–∞—Å –æ–∂–∏–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')

    events = EventsCollection.get_upcoming_events()
    for event in events:
        host = UserCollection.get_user_by_id(event.host)

        await message.answer(
            f'<b>{event.name}</b>\n\n{event.description}\n<b>–í—Ä–µ–º—è:</b>{event.time}\n<b>–ú–µ—Å—Ç–æ:</b>{event.place}\n<b>–•–æ—Å—Ç:</b>{host.name}',
            parse_mode=ParseMode.HTML
        )


@router.message(MainState.registered_user, F.text == '–û–±—ä—è–≤–∏—Ç—å –∏–≤–µ–Ω—Ç üéâ')
async def show_events(message: types.Message, state: FSMContext):
    await message.answer(
        '–í–∞—É, –∫–∞–∫ –∫—Ä—É—Ç–æ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏? –î–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(EventsStat.name)

@router.message(EventsStat.name)
async def show_events(message: types.Message, state: FSMContext):
    await message.answer('–ß—É–¥–µ—Å–Ω–æ! –ê –µ—Å–ª–∏ —á—É—Ç–æ—á–∫—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ? –î–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é')
    await state.update_data(name=message.text)
    await state.set_state(EventsStat.desc)

@router.message(EventsStat.desc)
async def show_events(message: types.Message, state: FSMContext):
    await message.answer('–£–≤–µ—Ä–µ–Ω, –Ω–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —ç—Ç–æ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è! –ê —Å—Ç–æ–ø, –∞ –∫–æ–≥–¥–∞ –æ–Ω–æ –±—É–¥–µ—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º.–¥–¥.–≥–≥.')
    await state.update_data(description=message.text)
    await state.set_state(EventsStat.date)

@router.message(EventsStat.date, DateFilter())
async def show_events(message: types.Message, state: FSMContext):
    await message.answer('–ê –≥–¥–µ –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è ü§î? –ù–∞–∑–æ–≤–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    day, month, year = map(int, message.text.split('.'))
    await state.update_data(time=datetime.datetime(day=day, month=month, year=year+2000))
    await state.set_state(EventsStat.place)

@router.message(EventsStat.date)
async def show_events(message: types.Message, state: FSMContext):
    await message.answer('–ù–µ–ø—Ä–∏–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

@router.message(EventsStat.place)
async def show_events(message: types.Message, state: FSMContext):
    await message.answer('–í—Å–µ, —Å–æ –≤—Å–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å! –°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ü•∞')
    await state.update_data(place=message.text)

    host = UserCollection.get_user_by_tg_id(message.from_user.id)

    data = await state.get_data()
    data['host'] = host.id

    event = Event(**data)
    event_id = EventsCollection.create_event(event)

    users = UserCollection.get_events_notification_allowed_users()

    for user in users:
        if user.tg_id == str(message.from_user.id):
            continue

        await bot.send_message(
            str(user.tg_id),
            f'<b>–û–±—ä—è–≤–ª—è–µ–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!</b>\n<b>{event.name}</b>\n\n{event.description}\n<b>–í—Ä–µ–º—è:</b>{event.time}\n<b>–ú–µ—Å—Ç–æ:</b>{event.place}\n<b>–•–æ—Å—Ç:</b>{host.name}',
            parse_mode=ParseMode.HTML
        )

    await state.set_state(MainState.registered_user)
    await message.answer('–ß–µ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ?', reply_markup=main_menu.get_registered_user())